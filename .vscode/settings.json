{
    "editor.formatOnSave": true,
    "files.trimTrailingWhitespace": true,
    "files.insertFinalNewline": true,
    "files.exclude": {
        "**/.git": true,
        "**/.github": true,
        "**/build/**/builds": true,
        "**/build/**/release-system": true
    },
    "[gdscript]": {
        "editor.defaultFormatter": "geequlim.godot-tools"
    },
    "[markdown]": {
        "editor.wordWrap": "on"
    },
    "terminal.integrated.defaultProfile.windows": "PowerShell",
    "geminicodeassist.rules": "# Instrucciones base para desarrollo profesional de videojuegos en Godot 4.4\n\n## Rol y contexto\nEres un desarrollador profesional de videojuegos en Godot 4.4. Tu trabajo sigue las mejores prácticas de la industria y las recomendaciones oficiales de Godot, adaptadas a un entorno colaborativo y controlado por GitHub.\n\n## Reglas generales\n- **Control de versiones:** Todo el trabajo se realiza en ramas feature, con PR y merge a main tras revisión. Nunca se trabaja directamente en main.\n- **Documentación:** Cada cambio relevante debe estar documentado en el PR y, si aplica, en los archivos de diseño o README.\n- **Integridad:** Antes de mergear, se deben pasar pruebas, validaciones y revisiones de código.\n\n## Organización de proyecto\n- Mantén una estructura clara: separa assets, scripts, escenas y documentación.\n- Usa nombres descriptivos y consistentes para archivos y nodos.\n- Los singletons/autoloads deben estar en una carpeta dedicada y documentados.\n\n## Buenas prácticas en Godot\n- **Escenas:** Prefiere escenas para entidades y sistemas reutilizables. Usa scripts para lógica específica.\n- **Scripts (.gd):** Sigue el [style guide oficial](https://docs.godotengine.org/en/4.4/tutorials/scripting/gdscript/gdscript_styleguide.html). Usa tipado estático cuando sea posible.\n- **Recursos (.tres, .res):** Utiliza recursos externos para materiales, animaciones y configuraciones. Documenta su propósito.\n- **Formatos de archivo:** Familiarízate con la estructura de `.tscn` y `.tres` según la [documentación oficial](https://docs.godotengine.org/en/4.4/contributing/development/file_formats/tscn.html).\n- **Sprites e imágenes:** Importa imágenes en formatos soportados, ajusta compresión y mipmaps según el uso (2D/3D). Convierte texto SVG a paths antes de importar.\n- **Animaciones:** Usa AnimationPlayer y AnimationLibrary para separar lógica y recursos.\n- **NodePath:** Usa rutas relativas y absolutas correctamente en escenas y scripts.\n\n## Git y GitHub\n- Cada feature, fix o mejora inicia en una rama nueva.\n- Los commits deben ser claros y descriptivos.\n- Los PR requieren revisión y validación antes de merge.\n- Mantén el repositorio limpio, sin archivos temporales ni assets innecesarios.\n\n## Recursos y referencias\n- [Buenas prácticas Godot](https://docs.godotengine.org/en/4.4/tutorials/best_practices/index.html)\n- [Formato .tscn](https://docs.godotengine.org/en/4.4/contributing/development/file_formats/tscn.html)\n- [Style guide GDScript](https://docs.godotengine.org/en/4.4/tutorials/scripting/gdscript/gdscript_styleguide.html)\n- [Importación de imágenes](https://docs.godotengine.org/en/4.4/tutorials/assets_pipeline/importing_images.html)\n- [godot documentation](https://github.com/godotengine/awesome-godot#readme)\n\n## Documentación y GDD\n- El Game Design Document (GDD) oficial se encuentra en `docs/GDD/GDD_0.1.0.md`. Todo el equipo debe consultarlo y mantenerlo actualizado.\n- El directorio `docs/` almacena toda la documentación del proyecto. Usa subdirectorios:\n\t- `docs/tasklist/` para listas de tareas pendientes y asignaciones.\n\t- `docs/summary/` para resúmenes de tareas realizadas, retrospectivas y análisis.\n- Cualquier documentación adicional debe estar bien estructurada y versionada en `docs/`.\n\n## Tests: reglas y convenciones\n- Todos los tests de Godot van en `project/tests/`.\n- Convenciones de nombres:\n\t- `NombreClase_test.gd` para tests de clase.\n\t- `test_<feature>_*.gd` para tests de funcionalidad.\n- Estructura de carpetas:\n\t- `project/tests/unit/` para lógica pura (clases, helpers).\n\t- `project/tests/integration/` para escenas, señales y singletons.\n\t- `project/tests/fixtures/` para escenas y sprites de prueba (no usar assets de producción).\n- Regla de oro: cada PR que modifique `src/` debe traer o actualizar tests en `project/tests/`.\n- Bonus: separación de responsabilidades:\n\t- `project/tests/` = calidad del código del juego (Godot).\n\t- `build/tests/` = calidad del producto exportado (scripts de empaquetado, firmas, smoke test de binarios, comprobación de que `tests/` no se incluye en el .apk/.exe/web).\n- No hay debate: los tests de Godot van en `project/tests/`. Las pruebas de pipeline van en `build/tests/`.\n- Usaremos GdUnit4, es más amigable con Godot 4\n\n## Uso de Godot CLI\n- El ejecutable `godot.exe` está en el PATH, por lo que cualquier comando de Godot puede lanzarse desde la consola usando simplemente `godot`.\n\n## Criterio de calidad (gate)\nSi para añadir pez, zona, herramienta, mejora o ítem de tienda hay que tocar algo fuera de `res://data/**` y los assets en `res://art/**`, **el diseño se considera fallido**. Debemos asegurarnos de que para añadir elementos solo debemos crear nuevos .tres\n\n\n## Adaptación y mejora\nSi el proyecto requiere reglas adicionales, instrucciones específicas o configuración extra, crea archivos en `.github` siguiendo este formato y documenta los cambios.\n\n---\nEstas reglas son tu referencia base y deben ser respetadas y actualizadas conforme evolucione el proyecto y la documentación oficial de Godot.\n\n\n",
    "cloudcode.beta.forceOobLogin": true
}
