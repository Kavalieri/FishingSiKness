# Script de Build para Fishing SiKness Prerelease
# Optimizado para evitar errores de empaquetado

param(
    [string]$Version = "0.1.0-prerelease",
    [string]$Platform = "windows"
)

Write-Host "üé£ Fishing SiKness - Build Prerelease v$Version" -ForegroundColor Cyan
Write-Host "=================================================" -ForegroundColor Cyan

# Configuraci√≥n
$ProjectPath = "E:\GitHub\Fishing-SiKness\project"
$BuildPath = "E:\GitHub\Fishing-SiKness\build\builds\$Platform"

# Verificar que Godot est√© disponible
Write-Host "üîß Verificando Godot..." -ForegroundColor Yellow
try {
    $godotVersion = & godot --version 2>&1
    Write-Host "   ‚úÖ Godot encontrado: $godotVersion" -ForegroundColor Green
}
catch {
    Write-Host "   ‚ùå Error: Godot no est√° en PATH" -ForegroundColor Red
    exit 1
}

# Crear directorio de build
Write-Host "üìÅ Preparando directorios..." -ForegroundColor Yellow
New-Item -ItemType Directory -Force -Path $BuildPath | Out-Null

# Limpiar archivos temporales antes del build
Write-Host "üßπ Limpiando archivos temporales..." -ForegroundColor Yellow
Push-Location $ProjectPath
Get-ChildItem -Recurse -Include "*.tmp", "*.log", ".godot" | Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
Pop-Location

# Verificar archivos cr√≠ticos
Write-Host "üîç Verificando archivos cr√≠ticos..." -ForegroundColor Yellow
$criticalFiles = @(
    "$ProjectPath\project.godot",
    "$ProjectPath\src\autoload\Content.gd",
    "$ProjectPath\src\autoload\Save.gd",
    "$ProjectPath\data\fish\fish_sardina.tres",
    "$ProjectPath\data\zones\zone_orilla.tres"
)

foreach ($file in $criticalFiles) {
    if (Test-Path $file) {
        $size = (Get-Item $file).Length
        if ($size -gt 0) {
            Write-Host "   ‚úÖ $([System.IO.Path]::GetFileName($file)) ($size bytes)" -ForegroundColor Green
        }
        else {
            Write-Host "   ‚ö†Ô∏è  $([System.IO.Path]::GetFileName($file)) est√° vac√≠o" -ForegroundColor Yellow
        }
    }
    else {
        Write-Host "   ‚ùå $([System.IO.Path]::GetFileName($file)) no encontrado" -ForegroundColor Red
    }
}

# Build principal
Write-Host "üî® Construyendo executable..." -ForegroundColor Yellow
$OutputFile = "$BuildPath\Fishing-SiKness-v$Version.exe"

try {
    Push-Location $ProjectPath

    # Export con configuraci√≥n optimizada
    & godot --headless --export "Windows Desktop - Release" $OutputFile 2>&1 | Tee-Object -FilePath "$BuildPath\build.log"

    if ($LASTEXITCODE -eq 0 -and (Test-Path $OutputFile)) {
        $size = [math]::Round((Get-Item $OutputFile).Length / 1MB, 2)
        Write-Host "   ‚úÖ Build exitoso: $size MB" -ForegroundColor Green
        Write-Host "   üì¶ Archivo: $OutputFile" -ForegroundColor Green
    }
    else {
        Write-Host "   ‚ùå Build fall√≥. Ver build.log para detalles" -ForegroundColor Red
        exit 1
    }

}
catch {
    Write-Host "   ‚ùå Error durante build: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}
finally {
    Pop-Location
}

# Verificaci√≥n post-build
Write-Host "üß™ Verificaci√≥n post-build..." -ForegroundColor Yellow
if (Test-Path $OutputFile) {
    # Test de ejecuci√≥n r√°pida (solo validar que inicia)
    Write-Host "   üöÄ Probando executable..." -ForegroundColor Yellow

    $testProcess = Start-Process -FilePath $OutputFile -ArgumentList "--headless", "--quit" -PassThru -NoNewWindow
    $testProcess.WaitForExit(10000)  # 10 segundos m√°ximo

    if ($testProcess.ExitCode -eq 0) {
        Write-Host "   ‚úÖ Executable funciona correctamente" -ForegroundColor Green
    }
    else {
        Write-Host "   ‚ö†Ô∏è  Executable inicia pero con warnings (normal para prerelease)" -ForegroundColor Yellow
    }
}
else {
    Write-Host "   ‚ùå Archivo de salida no encontrado" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üéâ Build Prerelease Completado!" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green
Write-Host "üì¶ Archivo: $OutputFile" -ForegroundColor White
Write-Host "üéØ Versi√≥n: $Version" -ForegroundColor White
Write-Host "üìù Log: $BuildPath\build.log" -ForegroundColor White
Write-Host ""
Write-Host "Para distribuir:" -ForegroundColor Yellow
Write-Host "1. Probar en m√°quina limpia sin Godot" -ForegroundColor White
Write-Host "2. Verificar que todos los assets se cargan" -ForegroundColor White
Write-Host "3. Comprobar funcionalidad b√°sica (pescar, cambiar zonas)" -ForegroundColor White
