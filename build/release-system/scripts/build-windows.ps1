# üöÄ BUILD WINDOWS - FishingSiKness
# Versi√≥n optimizada para m√°xima compatibilidad en otros PCs

Write-Host "üöÄ FishingSiKness - Build Windows" -ForegroundColor Green
Write-Host "===================================" -ForegroundColor Cyan
Write-Host "üí° Optimizado para compatibilidad m√°xima" -ForegroundColor Yellow

$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$RootDir = Get-Location
$ProjectRoot = Resolve-Path (Join-Path $PSScriptRoot "..\..\..\project")
$BuildDir = Resolve-Path (Join-Path $PSScriptRoot "..\..\builds")
$GodotPath = "godot"

Write-Host "üìÖ Timestamp: $timestamp" -ForegroundColor Gray
Write-Host "üìÅ Proyecto: $ProjectRoot" -ForegroundColor Gray

# Verificar que Godot existe en PATH
try {
    $null = & $GodotPath --version 2>$null
}
catch {
    Write-Host "‚ùå Godot no encontrado en PATH. Aseg√∫rate de que 'godot' est√© disponible." -ForegroundColor Red
    exit 1
}

# Verificar que el proyecto existe
if (-not (Test-Path $ProjectRoot)) {
    Write-Host "‚ùå Proyecto no encontrado en: $ProjectRoot" -ForegroundColor Red
    exit 1
}

# Crear directorio de builds
$windowsDir = Join-Path $BuildDir "windows"
$timestampDir = Join-Path $windowsDir $timestamp
New-Item -ItemType Directory -Force -Path $timestampDir | Out-Null

$exePath = Join-Path $timestampDir "FishingSiKness.exe"

Write-Host "`nüîß Modificando configuraci√≥n temporal para m√°xima compatibilidad..." -ForegroundColor Yellow

# Backup de export_presets.cfg
$exportPresetsPath = Join-Path $ProjectRoot "export_presets.cfg"
$backupPath = Join-Path $ProjectRoot "export_presets.cfg.backup"
Copy-Item $exportPresetsPath $backupPath -Force

# Leer configuraci√≥n actual
$exportConfig = Get-Content $exportPresetsPath -Raw

# Modificar para m√°xima compatibilidad
$newConfig = $exportConfig -replace 'debug/export_console_wrapper=0', 'debug/export_console_wrapper=1'
$newConfig = $newConfig -replace 'export_path="../builds/windows/FishingSiKness.exe"', "export_path=`"$exePath`""

# Aplicar configuraci√≥n temporal
Set-Content $exportPresetsPath $newConfig -NoNewline

Write-Host "`nüî® Ejecutando build con configuraci√≥n standalone..." -ForegroundColor Yellow

# Build con preset 0 (Windows Desktop - Release)
$godotArgs = "--headless --export-release `"Windows Desktop - Release`" `"$exePath`" --path `"$ProjectRoot`""
$process = Start-Process -FilePath $GodotPath -ArgumentList $godotArgs -PassThru -NoNewWindow

# Esperar con timeout de 5 minutos
$timeout = 300 # 5 minutos en segundos
if (-not $process.WaitForExit($timeout * 1000)) {
    Write-Host "‚ö†Ô∏è Timeout alcanzado, forzando cierre del proceso..." -ForegroundColor Yellow
    $process.Kill()
    $process.WaitForExit()
}

# Restaurar configuraci√≥n original
Copy-Item $backupPath $exportPresetsPath -Force
Remove-Item $backupPath -Force

# Verificar resultado
if (Test-Path $exePath) {
    $exeInfo = Get-Item $exePath
    Write-Host "`n‚úÖ BUILD COMPLETADO!" -ForegroundColor Green
    Write-Host "üìÅ Ubicaci√≥n: $exePath" -ForegroundColor Cyan
    Write-Host "üìè Tama√±o: $([math]::Round($exeInfo.Length/1MB, 2)) MB" -ForegroundColor Cyan

    # Crear symlink latest
    $latestDir = Join-Path $windowsDir "latest"

    if (Test-Path $latestDir) {
        Remove-Item $latestDir -Force -Recurse -ErrorAction SilentlyContinue
    }

    try {
        # Intentar crear symlink del directorio completo
        New-Item -ItemType SymbolicLink -Path $latestDir -Target $timestampDir -ErrorAction Stop | Out-Null
        Write-Host "   üîó Symlink 'latest' creado apuntando a $timestampDir" -ForegroundColor Green
    }
    catch {
        # Fallback: copiar directorio
        Copy-Item $timestampDir $latestDir -Recurse -Force
        Write-Host "   üìÅ Directorio 'latest' copiado (symlink fall√≥)" -ForegroundColor Yellow
    }

    Write-Host "`nüí° RECOMENDACIONES PARA COMPATIBILIDAD:" -ForegroundColor Yellow
    Write-Host "  ‚úÖ PCK embedido - No necesita archivos adicionales" -ForegroundColor Green
    Write-Host "  ‚úÖ Console wrapper habilitado - Mejor debuging" -ForegroundColor Green
    Write-Host "  ‚ö†Ô∏è  Visual C++ 2019/2022 Redistributable puede ser necesario" -ForegroundColor Yellow
    Write-Host "  üí° Incluir vcredist_x64.exe con la distribuci√≥n" -ForegroundColor Cyan

    Write-Host "`nüåê URLs de descarga para VC++ Redistributable:" -ForegroundColor Cyan
    Write-Host "  https://aka.ms/vs/17/release/vc_redist.x64.exe" -ForegroundColor Blue

}
else {
    Write-Host "`n‚ùå Error: No se pudo generar el ejecutable" -ForegroundColor Red
    exit 1
}

Write-Host "`nüéØ Build Windows listo para distribuci√≥n!" -ForegroundColor Green

# Volver al directorio ra√≠z del proyecto
Set-Location $RootDir

# Salir con c√≥digo exitoso
exit 0
