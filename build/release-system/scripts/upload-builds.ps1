# =============================================================================
# FishingSiKness - Upload Builds to Latest Release
# =============================================================================
# Sube autom√°ticamente los builds m√°s recientes al √∫ltimo release de GitHub
# Reemplaza archivos existentes si ya est√°n presentes
# =============================================================================

param(
    [string]$ReleaseTag,  # Tag espec√≠fico del release (opcional)
    [switch]$DryRun       # Solo mostrar qu√© se har√≠a sin ejecutar
)

# Configuraci√≥n
$rootDir = (Get-Item $PSScriptRoot).Parent.Parent.Parent.FullName
$buildsDir = Join-Path $rootDir "build\builds"

Write-Host "üöÄ FishingSiKness - Upload Builds to Release" -ForegroundColor Cyan
Write-Host "=============================================" -ForegroundColor Cyan
Write-Host "üìÅ Proyecto: $rootDir" -ForegroundColor Gray
Write-Host ""

# Verificar que gh CLI est√° disponible
if (-not (Get-Command gh -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå GitHub CLI (gh) no est√° instalado o no est√° en PATH" -ForegroundColor Red
    Write-Host "üí° Instala GitHub CLI desde: https://cli.github.com/" -ForegroundColor Yellow
    exit 1
}

# Obtener el release m√°s reciente si no se especifica tag
if (-not $ReleaseTag) {
    try {
        Write-Host "üîç Obteniendo el release m√°s reciente..." -ForegroundColor Yellow
        $latestRelease = gh release list --limit 1 --json tagName | ConvertFrom-Json
        if ($latestRelease -and $latestRelease.Count -gt 0) {
            $ReleaseTag = $latestRelease[0].tagName
            Write-Host "üì¶ Release encontrado: $ReleaseTag" -ForegroundColor Green
        }
        else {
            Write-Host "‚ùå No se encontraron releases en el repositorio" -ForegroundColor Red
            exit 1
        }
    }
    catch {
        Write-Host "‚ùå Error obteniendo releases: $($_.Exception.Message)" -ForegroundColor Red
        exit 1
    }
}
else {
    Write-Host "üì¶ Usando release especificado: $ReleaseTag" -ForegroundColor Green
}

# Verificar que el release existe
try {
    $releaseInfo = gh release view $ReleaseTag --json tagName, name, url
    Write-Host "‚úÖ Release verificado: $($releaseInfo.name)" -ForegroundColor Green
    Write-Host "üîó URL: $($releaseInfo.url)" -ForegroundColor Gray
}
catch {
    Write-Host "‚ùå El release '$ReleaseTag' no existe" -ForegroundColor Red
    exit 1
}

Write-Host ""

# =============================================================================
# BUSCAR BUILDS RECIENTES
# =============================================================================
$buildFiles = @()

# Windows builds
$windowsLatest = Join-Path $buildsDir "windows\latest"
if (Test-Path $windowsLatest) {
    $windowsFiles = Get-ChildItem $windowsLatest -File -Filter "*.exe"
    foreach ($file in $windowsFiles) {
        $buildFiles += @{
            Path     = $file.FullName
            Name     = $file.Name
            Platform = "Windows"
            Size     = [math]::Round($file.Length / 1MB, 2)
        }
    }
}

# Android builds
$androidLatest = Join-Path $buildsDir "android\latest"
if (Test-Path $androidLatest) {
    $androidFiles = Get-ChildItem $androidLatest -File -Filter "*.apk"
    foreach ($file in $androidFiles) {
        $buildFiles += @{
            Path     = $file.FullName
            Name     = $file.Name
            Platform = "Android"
            Size     = [math]::Round($file.Length / 1MB, 2)
        }
    }
}

# Mostrar archivos encontrados
Write-Host "üìã BUILDS ENCONTRADOS:" -ForegroundColor Cyan
Write-Host "======================" -ForegroundColor Cyan

if ($buildFiles.Count -eq 0) {
    Write-Host "‚ùå No se encontraron builds en los directorios 'latest'" -ForegroundColor Red
    Write-Host "üí° Ejecuta primero los scripts de build para generar archivos" -ForegroundColor Yellow
    exit 1
}

foreach ($build in $buildFiles) {
    Write-Host "   üì¶ $($build.Name) [$($build.Platform)] - $($build.Size) MB" -ForegroundColor White
}

Write-Host ""

# =============================================================================
# SUBIR ARCHIVOS AL RELEASE
# =============================================================================
if ($DryRun) {
    Write-Host "üîç MODO DRY-RUN - No se subir√°n archivos" -ForegroundColor Yellow
    Write-Host "Los siguientes comandos se ejecutar√≠an:" -ForegroundColor Yellow
    Write-Host ""

    foreach ($build in $buildFiles) {
        Write-Host "   gh release upload $ReleaseTag `"$($build.Path)`" --clobber" -ForegroundColor Gray
    }
    Write-Host ""
    exit 0
}

Write-Host "üì§ SUBIENDO BUILDS AL RELEASE..." -ForegroundColor Magenta
Write-Host "=================================" -ForegroundColor Magenta

$uploadSuccess = 0
$uploadFailed = 0
$uploadResults = @()

foreach ($build in $buildFiles) {
    Write-Host "üì§ Subiendo $($build.Name)..." -ForegroundColor Yellow

    try {
        $uploadCmd = "gh release upload $ReleaseTag `"$($build.Path)`" --clobber"
        Invoke-Expression $uploadCmd

        if ($LASTEXITCODE -eq 0) {
            $uploadSuccess++
            $uploadResults += "‚úÖ $($build.Name) - EXITOSO"
            Write-Host "   ‚úÖ $($build.Name) subido correctamente" -ForegroundColor Green
        }
        else {
            $uploadFailed++
            $uploadResults += "‚ùå $($build.Name) - FALL√ì (c√≥digo: $LASTEXITCODE)"
            Write-Host "   ‚ùå Error subiendo $($build.Name)" -ForegroundColor Red
        }
    }
    catch {
        $uploadFailed++
        $uploadResults += "‚ùå $($build.Name) - ERROR: $($_.Exception.Message)"
        Write-Host "   ‚ùå Error: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# =============================================================================
# RESUMEN FINAL
# =============================================================================
Write-Host ""
Write-Host "üéØ RESUMEN DE UPLOAD" -ForegroundColor Cyan
Write-Host "====================" -ForegroundColor Cyan
Write-Host "üì¶ Release: $ReleaseTag" -ForegroundColor White
Write-Host "‚úÖ Exitosos: $uploadSuccess" -ForegroundColor Green
Write-Host "‚ùå Fallidos: $uploadFailed" -ForegroundColor Red
Write-Host ""

foreach ($result in $uploadResults) {
    Write-Host "   $result"
}

Write-Host ""

if ($uploadSuccess -gt 0) {
    Write-Host "üéâ ¬°Builds subidos exitosamente!" -ForegroundColor Green
    Write-Host "üîó Ver release: https://github.com/Kavalieri/FishingSiKness/releases/tag/$ReleaseTag" -ForegroundColor Blue
}

if ($uploadFailed -gt 0) {
    Write-Host "‚ö†Ô∏è  Algunos uploads fallaron. Revisa los logs anteriores." -ForegroundColor Yellow
    exit 1
}
else {
    exit 0
}
