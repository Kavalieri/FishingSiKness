# =============================================================================
# FishingSiKness - Build All Platforms
# =============================================================================
# Construye el juego para todas las plataformas disponibles:
# - Windows (standalone executable)
# - Android (APK + AAB)
# - Web (HTML5 + WebAssembly) con deploy autom√°tico a Vercel
# =============================================================================

param(
    [switch]$Deploy,  # Si incluir deploy web a Vercel
    [switch]$Clean    # Si limpiar builds anteriores
)

# Configuraci√≥n
$rootDir = (Get-Item $PSScriptRoot).Parent.Parent.Parent.FullName
$scriptsDir = $PSScriptRoot
$buildsDir = Join-Path $rootDir "build\builds"

Write-Host "üöÄ FishingSiKness - Build ALL Platforms" -ForegroundColor Cyan
Write-Host "=======================================" -ForegroundColor Cyan
Write-Host "üìÅ Proyecto: $rootDir"
Write-Host "üìÇ Scripts: $scriptsDir"
Write-Host ""

# Limpiar builds anteriores si se solicita
if ($Clean) {
    Write-Host "üßπ Limpiando builds anteriores..." -ForegroundColor Yellow
    if (Test-Path $buildsDir) {
        Remove-Item $buildsDir -Recurse -Force
        Write-Host "‚úÖ Builds anteriores eliminados" -ForegroundColor Green
    }
    Write-Host ""
}

# Variables para tracking
$successCount = 0
$failCount = 0
$results = @()

# =============================================================================
# BUILD WINDOWS
# =============================================================================
Write-Host "üñ•Ô∏è  INICIANDO BUILD WINDOWS..." -ForegroundColor Magenta
$windowsScript = Join-Path $scriptsDir "build-windows.ps1"

try {
    & $windowsScript
    if ($LASTEXITCODE -eq 0) {
        $successCount++
        $results += "‚úÖ Windows Build: EXITOSO"
        Write-Host "‚úÖ Windows Build completado" -ForegroundColor Green
    }
    else {
        $failCount++
        $results += "‚ùå Windows Build: FALL√ì"
        Write-Host "‚ùå Windows Build fall√≥" -ForegroundColor Red
    }
}
catch {
    $failCount++
    $results += "‚ùå Windows Build: ERROR - $($_.Exception.Message)"
    Write-Host "‚ùå Error en Windows Build: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# =============================================================================
# BUILD ANDROID
# =============================================================================
Write-Host "ü§ñ INICIANDO BUILD ANDROID..." -ForegroundColor Green
$androidScript = Join-Path $scriptsDir "build-android.ps1"

try {
    & $androidScript
    if ($LASTEXITCODE -eq 0) {
        $successCount++
        $results += "‚úÖ Android Build: EXITOSO"
        Write-Host "‚úÖ Android Build completado" -ForegroundColor Green
    }
    else {
        $failCount++
        $results += "‚ùå Android Build: FALL√ì"
        Write-Host "‚ùå Android Build fall√≥" -ForegroundColor Red
    }
}
catch {
    $failCount++
    $results += "‚ùå Android Build: ERROR - $($_.Exception.Message)"
    Write-Host "‚ùå Error en Android Build: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""

# =============================================================================
# BUILD WEB
# =============================================================================
Write-Host "üåê INICIANDO BUILD WEB..." -ForegroundColor Blue
$webScript = Join-Path $scriptsDir "build-web.ps1"

try {
    if ($Deploy) {
        & $webScript -Deploy
    }
    else {
        & $webScript
    }

    if ($LASTEXITCODE -eq 0) {
        $successCount++
        if ($Deploy) {
            $results += "‚úÖ Web Build + Deploy: EXITOSO"
        }
        else {
            $results += "‚úÖ Web Build: EXITOSO"
        }
        Write-Host "‚úÖ Web Build completado" -ForegroundColor Green
    }
    else {
        $failCount++
        if ($Deploy) {
            $results += "‚ùå Web Build + Deploy: FALL√ì"
        }
        else {
            $results += "‚ùå Web Build: FALL√ì"
        }
        Write-Host "‚ùå Web Build fall√≥" -ForegroundColor Red
    }
}
catch {
    $failCount++
    $results += "‚ùå Web Build: ERROR - $($_.Exception.Message)"
    Write-Host "‚ùå Error en Web Build: $($_.Exception.Message)" -ForegroundColor Red
}

# =============================================================================
# RESUMEN FINAL
# =============================================================================
Write-Host ""
Write-Host "üéØ RESUMEN FINAL DE BUILDS" -ForegroundColor Cyan
Write-Host "===========================" -ForegroundColor Cyan
Write-Host "‚úÖ Exitosos: $successCount" -ForegroundColor Green
Write-Host "‚ùå Fallidos: $failCount" -ForegroundColor Red
Write-Host ""

foreach ($result in $results) {
    Write-Host "   $result"
}

Write-Host ""

if ($successCount -eq 3) {
    Write-Host "üéâ ¬°TODOS LOS BUILDS COMPLETADOS EXITOSAMENTE!" -ForegroundColor Green
    Write-Host "üìÅ Builds disponibles en: $buildsDir" -ForegroundColor Gray

    if ($Deploy) {
        Write-Host "üåê Web desplegado en Vercel" -ForegroundColor Blue
    }
}
else {
    Write-Host "‚ö†Ô∏è  Algunos builds fallaron. Revisa los logs anteriores." -ForegroundColor Yellow

    if ($failCount -gt 0) {
        Write-Host ""
        Write-Host "üí° CONSEJOS PARA SOLUCIONAR PROBLEMAS:" -ForegroundColor Cyan
        Write-Host "   ‚Ä¢ Windows: Verificar que Godot est√© en PATH" -ForegroundColor White
        Write-Host "   ‚Ä¢ Android: Configurar Android SDK y export templates" -ForegroundColor White
        Write-Host "   ‚Ä¢ Web: Verificar export presets y configuraci√≥n UTF-8" -ForegroundColor White
    }
}

Write-Host ""

# Retornar c√≥digo de salida apropiado
if ($failCount -eq 0) {
    exit 0
}
else {
    exit 1
}
