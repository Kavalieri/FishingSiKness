name: release-please

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üöÄ Run Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: simple
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .github/release-please-config.json
          manifest-file: .release-please-manifest.json

      - name: üéÆ Update Release with Enhanced Description
        if: steps.release.outputs.release_created
        run: |
          # Crear descripci√≥n mejorada con cabecera informativa
          cat > release_description.md << 'EOF'
          <div align="center">

          <img src="https://raw.githubusercontent.com/Kavalieri/FishingSiKness/main/project/icon.svg" alt="FishingSiKness Logo" width="300" />

          # üé£ FishingSiKness ${{ steps.release.outputs.tag_name }}

          **ü§ñ Juego de pesca experimental desarrollado completamente con IA**

          ![Alpha](https://img.shields.io/badge/Status-Alpha-orange?style=for-the-badge)
          ![Platform](https://img.shields.io/badge/Platform-Windows%20|%20Android%20|%20Web-lightgrey?style=for-the-badge)

          ---

          </div>

          ## üéÆ **JUGAR AHORA**

          ### üåê **Versi√≥n Web (Recomendada)**
          **‚ñ∂Ô∏è [https://fishingsikness.vercel.app/](https://fishingsikness.vercel.app/)**
          - ‚úÖ **Sin instalaci√≥n** - Juega inmediatamente en tu navegador
          - üöÄ **Siempre actualizada** - Deploy autom√°tico con cada release
          - üì± **Compatible m√≥vil** - Funciona en smartphones y tablets

          ### üì• **Descargas Nativas**
          - üñ•Ô∏è **Windows**: Ejecutable standalone (descarga abajo)
          - üì± **Android**: APK para instalaci√≥n directa (descarga abajo)

          ---

          ## ‚ö†Ô∏è **ESTADO DE DESARROLLO**

          **Esta es una versi√≥n ALPHA experimental** desarrollada mediante agentes de IA. El juego est√° en desarrollo activo con las siguientes caracter√≠sticas:

          - üî¨ **Funcionalidades b√°sicas**: Sistema de pesca, inventario y guardado implementados
          - üéØ **Arquitectura data-driven**: Todo el contenido definido mediante recursos `.tres`
          - üõ†Ô∏è **Desarrollo continuo**: Updates frecuentes con nuevas mec√°nicas
          - üêõ **Bugs esperados**: Como toda versi√≥n alpha, puede tener problemas conocidos

          ---

          ## üöÄ **CHANGELOG**

          EOF

          # Obtener el body actual de la release y anexar
          CURRENT_BODY=$(gh release view ${{ steps.release.outputs.tag_name }} --json body -q .body)

          # Combinar nueva descripci√≥n con changelog existente
          cat release_description.md > final_description.md
          echo "$CURRENT_BODY" >> final_description.md

          # Actualizar la release con la nueva descripci√≥n
          gh release edit ${{ steps.release.outputs.tag_name }} --notes-file final_description.md --prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Attach Build Artifacts
        if: steps.release.outputs.release_created
        run: |
          echo "üîç Buscando builds disponibles..."

          # Buscar builds m√°s recientes en directorios latest
          WINDOWS_BUILD_DIR="build/builds/windows/latest"
          ANDROID_BUILD_DIR="build/builds/android/latest"

          if [ -d "$WINDOWS_BUILD_DIR" ]; then
            echo "üìÅ Directorio Windows encontrado: $WINDOWS_BUILD_DIR"
            # Buscar ejecutable principal y console wrapper
            WINDOWS_EXE=$(find $WINDOWS_BUILD_DIR -name "*.exe" -not -name "*.console.exe" | head -1)
            CONSOLE_EXE=$(find $WINDOWS_BUILD_DIR -name "*.console.exe" | head -1)

            if [ -n "$WINDOWS_EXE" ]; then
              echo "üñ•Ô∏è Adjuntando Windows build: $WINDOWS_EXE"
              gh release upload ${{ steps.release.outputs.tag_name }} "$WINDOWS_EXE" --clobber
            fi

            if [ -n "$CONSOLE_EXE" ]; then
              echo "üñ•Ô∏è Adjuntando Console wrapper: $CONSOLE_EXE"
              gh release upload ${{ steps.release.outputs.tag_name }} "$CONSOLE_EXE" --clobber
            fi
          else
            echo "‚ö†Ô∏è No se encontr√≥ directorio Windows build en: $WINDOWS_BUILD_DIR"
          fi

          if [ -d "$ANDROID_BUILD_DIR" ]; then
            echo "üìÅ Directorio Android encontrado: $ANDROID_BUILD_DIR"
            # Buscar APK y AAB
            ANDROID_APK=$(find $ANDROID_BUILD_DIR -name "*.apk" | head -1)
            ANDROID_AAB=$(find $ANDROID_BUILD_DIR -name "*.aab" | head -1)

            if [ -n "$ANDROID_APK" ]; then
              echo "üì± Adjuntando Android APK: $ANDROID_APK"
              gh release upload ${{ steps.release.outputs.tag_name }} "$ANDROID_APK" --clobber
            fi

            if [ -n "$ANDROID_AAB" ]; then
              echo "üì± Adjuntando Android AAB: $ANDROID_AAB"
              gh release upload ${{ steps.release.outputs.tag_name }} "$ANDROID_AAB" --clobber
            fi
          else
            echo "‚ö†Ô∏è No se encontr√≥ directorio Android build en: $ANDROID_BUILD_DIR"
          fi

          echo "‚úÖ Proceso de adjuntar builds completado"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
